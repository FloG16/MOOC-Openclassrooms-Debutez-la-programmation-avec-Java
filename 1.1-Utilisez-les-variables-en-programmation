Une donn√©e plac√©e dans une variable s'appelle une valeur. En utilisant l'analogie des bo√Ætes, diff√©rentes bo√Ætes peuvent stocker diff√©rentes valeurs. 

Par exemple, vous pouvez utiliser une bo√Æte pour ranger de l'argent pour vos d√©penses courantes et une autre pour √©conomiser en vue d'une occasion particuli√®re, 

comme un voyage. Vous pouvez √©galement vider les bo√Ætes ou changer leur contenu quand vous ajoutez ou retirez de l'argent.

Pour savoir √† quoi sert chaque bo√Æte, vous devez les √©tiqueter. Avec la programmation, c'est la m√™me chose : vous attribuez un nom √† votre variable.

Le nom d'une variable doit refl√©ter la signification de son contenu, comme des √©tiquettes sur une bo√Æte. Voici quelques recommandations g√©n√©rales pour la cr√©ation 
de noms :

    utilisez des noms descriptifs tout au long de votre code.
    √áa risque d'√™tre un peu long ! Cependant, les noms descriptifs sont bien pratiques √† long terme pour vous et pour votre √©quipe, car ils offrent une meilleure 
    lisibilit√© et facilitent ainsi la compr√©hension du code pour les autres d√©veloppeurs. Par exemple, si vous voulez stocker des cookies sans sucres, l'utilisation 
    d'un nom descriptif comme  cookiesSansSucres  est bien plus pr√©cis que, disons,  cookies  ou  cookiesSains.

    Soyez complet.
    √âvitez si possible d'abr√©ger ou de raccourcir les mots, m√™me si une version plus courte semble √©vidente. Par exemple,  chiffreDAffairesAnnuel  est pr√©f√©rable √†  
    chifAfAnn.

    Suivez une convention d'appellation commune.
    L'une des conventions d'appellation les plus populaires est le Camel Case : une phrase compos√©e de plusieurs mots sans espaces ni ponctuation. Le premier mot 
    est √©crit en minuscules et tous les autres mots commencent par une majuscule. Par exemple,  monBudget.
    
Cr√©ez une variable avec une d√©claration de variable

Pour utiliser une variable dans votre code, vous devez la cr√©er, ou, en langage de d√©veloppeur, la d√©clarer. Il existe plusieurs types de variables en Java, qui seront
utilis√©es en fonction du type de valeur qu'elles contiennent. Nous y reviendrons dans la section "Allez au-del√† de l'arithm√©tique des nombres" √† la fin de ce chapitre.

En Java, les variables qui contiennent des nombres sont d√©clar√©es en utilisant un mot cl√© tel que  int  suivi du nom d'une variable et de sa valeur initiale. 
Par exemple :

int ongoingAllowance = 500;

int savings = 1000;

Ici, nous avons d√©clar√© deux variables :  ongoingAllowance  (allocationEnCours) et  savings  (√©pargne). Ces variables stockent respectivement les valeurs de 500 et 1 000.

Ici, en plus de la d√©claration, nous avons √©galement assign√© les valeurs initiales aux variables, c'est-√†-dire une valeur de d√©part que vous fixez.

En Java, le type  int  ne stocke que des nombres entiers. Pas de centimes pour vous ! Si vous voulez utiliser les centimes, vous pouvez utiliser le type  double, 
qui stocke les nombres d√©cimaux (ou ¬´ flottants ¬ª).

Modifiez la valeur de votre variable avec les op√©rateurs

Une variable peut varier, c'est-√†-dire changer de valeur. Elle porte bien son nom, n'est-ce pas ? :)

Pour la faire varier, vous pouvez effectuer plusieurs op√©rations.

Reprenons les variables  ongoingAllowance  (allocationEnCours) et  savings  (√©pargne) de l'exemple pr√©c√©dent. Vous pourriez :

    ajouter de l'argent au montant √©pargn√© ;

    soustraire de l'argent aux d√©penses en cours ;

    d√©couvrir combien de temps il vous faudra pour atteindre 5 000 euros si vous √©pargnez 500 euros par mois ;

    d√©couvrir le montant de vos d√©penses si vous continuez √† ajouter 30 euros par jour pendant une semaine ;

    d√©couvrir le montant de vos d√©penses si vous d√©pensez 10 euros par jour pendant une semaine.

Des probl√®mes du monde r√©el avec des solutions de programmation ! üíª Eh oui, chaque op√©ration fonctionne gr√¢ce √† des op√©rateurs arithm√©tiques :

    +  addition ;

    -  soustraction ;

    *  multiplication ;

    /  division.

Les r√®gles arithm√©tiques habituelles s'appliquent en code ! Et notamment l'ordre d'ex√©cution !

Tout comme en math√©matiques, vous pouvez utiliser des parenth√®ses pour d√©cider de ce qui se passe, et quand. Voyons comment vous pouvez atteindre votre objectif en 
Java :

public class MyVariable {


    public static void main(String[] args) {

    int savings = 500;

    int ongoingAllowance = 2000;


        //Ajoutez 100 √† votre √©pargne (Yeah!)

        savings = savings + 100;

        

        //Enlevez 50 √† votre indemnit√© (Snif)

        ongoingAllowance = ongoingAllowance - 50;

        

        //Faites une mise √† jour sur votre d√©lai d'√©pargne

        int numberOfDaysToSave = (5000 - ongoingAllowance) / 500;

        

        //Mettez √† jour √† nouveau votre indemnit√© (encore)

        ongoingAllowance = ongoingAllowance + (30 - 10) * 7;

    }

}


Regardez ce joli bloc de code ! Notez que toutes les lignes ne se ressemblent pas. Notez que les lignes qui commencent par  //  sont des commentaires. 
Elles servent √† aider un autre humain √† comprendre le code.

Ici, chaque affectation assigne une valeur √† une variable. Une affection est compos√©e de trois √©l√©ments :

    l'op√©rateur d'affectation est  =  ;

    √† gauche de l'op√©rateur d'affectation, vous √©crivez le nom de la variable √† laquelle vous voulez que le r√©sultat corresponde ;

    √† droite de l'op√©rateur d'affectation, vous √©crivez une expression. Une expression est une affectation qui produit une valeur.

Est-ce qu'on peut r√©sumer ? :)

Oui ! Pour affecter une valeur √† une variable, vous √©crivez une affectation. Cette affectation se compose du nom de la variable, suivie de l'op√©rateur d'affectation, 
et enfin de l'expression qui produit une valeur correspondant au type de la variable.
√âcrivez un code plus court avec des op√©rateurs d'affectation raccourcis

Chaque affectation attribue une valeur √† une variable. Vous pouvez directement assigner une valeur √† droite de l'op√©rateur d'affectation. Voici une exemple :

//remplacez la variable √©pargne par le nouveau montant

savings = 10000;

D'ailleurs, lorsque vous avez besoin de changer la valeur d'une variable avec des op√©rateurs de base et de l'affecter √† cette variable, vous pouvez utiliser une 
version raccourcie ! Voici un exemple. Au lieu d'utiliser  savings + 100  et l'op√©rateur d'affectation  =, vous pouvez utiliser un op√©rateur d'affectation joint √† 
l'op√©rateur arithm√©tique  +=  :

// Version d'affectation normale

savings = savings + 100;


// Version raccourcie d'affectation

savings += 100;

Les autres variantes courtes sont :

    +=  addition ;

    -=  soustraction ;

    *=  multiplication ;

    /=  division.
    
Allez au-del√† de l'arithm√©tique des nombres

Dans l'exemple que nous avons utilis√©, toutes les variables stockent des montants d'argent, qui sont des nombres.

Quels autres types de valeurs pouvons-nous affecter aux variables ?

La bonne nouvelle, c'est que nous pouvons stocker n'importe quel type de donn√©e dans des variables ! üòÄ

Jusqu'√† pr√©sent, vous avez vu les composantes suivantes d'une variable : nom et valeur. Enfin, pour pouvoir stocker diff√©rents contenus dans les bo√Ætes (ou bocaux), 
vous devez d√©finir le type de la variable. Tout comme le stockage de l'argent n√©cessite un conteneur diff√©rent de celui d'un livre, diff√©rentes variables utilisent 
√©galement un espace de stockage diff√©rent en fonction de leur type.

Supposons que vous soyez en train de travailler sur une application d'√©criture et que vous ayez besoin d'analyser du texte et de calculer ce qui suit :

    le nombre de voyelles pr√©sentes dans le texte ;

    le pourcentage de voyelles.

Vous pouvez d√©composer le processus comme suit :

    Demandez du texte √† l'utilisateur. üÜí

    Parcourez le texte fourni par l'utilisateur caract√®re par caract√®re. üîç

    Augmentez votre total √† chaque fois que vous trouvez une voyelle. ‚ûï

    Divisez le nombre final de voyelles par le nombre total de caract√®res de la cha√Æne pour obtenir le pourcentage.‚ûó

    Multipliez ce r√©sultat par 100 pour le pourcentage final. ‚úñÔ∏è

De combien de variables auriez-vous besoin pour y parvenir ? Pensez au nombre d'informations individuelles que vous devez stocker :

    La s√©quence initiale de caract√®res que vous demandez √† l'utilisateur (une cha√Æne ou string).

    Le nombre de voyelles pr√©sentes dans la cha√Æne.

    Le pourcentage de voyelles.

On dirait que vous avez besoin de trois variables ! Pour d√©finir chacune d'entre elles, vous avez besoin des composants suivants :

    Un nom, pour que vous puissiez trouver l'information ult√©rieurement.

    Une valeur initiale, qui vous donnera un point de d√©part.

    Un type, qui d√©finira le type de variable que vous avez : cha√Æne (texte), entier (nombre entier), ou d√©cimal (virgule flottante).

     

Vous en saurez bient√¥t plus sur les types de variables !

Pour l'instant, il suffit de conna√Ætre ces 3 variables :

    String = texte

    int = nombre entier

    double = nombre en virgule flottante 

En Java, vous pouvez d√©clarer vos trois variables comme ceci :

String text = "A wonderful string that consists of multiple characters"

int numberOfVowels = 0

double percentageOfVowels = 0.0

Veuillez noter que lorsque vous affectez une valeur √† une variable lors de sa d√©claration, vous devez indiquer explicitement le type de variable dont il s'agit. 
Pour ce faire, ajoutez le type dans votre d√©claration en utilisant les mots cl√©s int, String ou double dans notre cas ci-dessus.
D√©couvrez des variables qui ne changent jamais

Jusqu'√† pr√©sent, la plupart des valeurs changeaient en fonction des circonstances (ajouter de l'argent aux √©conomies, augmenter le nombre de voyelles). 
Certaines valeurs, cependant, n'ont pas besoin d'√™tre modifi√©es. Elles restent exactement telles qu'elles ont √©t√© d√©finies au d√©part. Une variable avec une valeur 
qui ne change pas s'appelle une constante. Tout comme les autres variables, les constantes sont d√©crites par trois composantes : nom, valeur et type. 
La seule diff√©rence est qu'une fois que vous l'avez d√©finie, la valeur d'une constante ne peut plus √™tre modifi√©e.

L'utilisation de constantes est utile pour deux raisons :

    Elles permettent aux programmes d'√™tre plus rapides. L'ordinateur sait combien d'espace une constante prend. Cela signifie que lorsqu'il effectue des op√©rations, 
    il n'a pas besoin de v√©rifier les valeurs alternatives.

    V√©rifiez que certaines valeurs ne changent pas, que ce soit intentionnellement ou par accident. Par exemple, vous ne voudriez pas modifier les jours de la semaine 
    ou le nombre de jours dans une ann√©e. üìÖ

Lorsque vous codez, il est recommand√© d'utiliser des constantes dans la mesure du possible.

D√©clarons quelques constantes et voyons comment elles fonctionnent. Pour d√©clarer une constante en Java, vous devez utiliser le mot cl√© final :

final int numberOfWeekdays = 7;

final String myFavouriteFood = "Icecream";


int numberOfPets = 1;

String currentSeason = "Winter";

Il y a des variables et des constantes dans l'exemple ci-dessus. Si vous essayez de modifier les valeurs de toutes ces variables, seules les variables passeront 
et les constantes g√©n√©reront des erreurs :

numberOfWeekdays = numberOfWeekdays + 1; // Error

myFavouriteFood = "Cake"; // Error


numberOfPets = 3; // Ok

currentSeason = "Summer"; // Ok

Si vous regardez le fonctionnement des variables dans diff√©rents langages de programmation, vous allez probablement remarquer quelques diff√©rences. Il est important 
de les conna√Ætre lorsque vous commencez √† programmer dans un environnement sp√©cifique. Cependant, vous observerez aussi beaucoup de similitudes. 
Bien que les variables puissent sembler diff√©rentes d'un langage √† l'autre, les concepts restent les m√™mes. Ne l'oubliez pas si vous d√©cidez de commencer √† programmer
dans un autre langage.
