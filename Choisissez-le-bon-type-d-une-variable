Pourquoi avons-nous besoin de types de donn√©es ?

Dans le chapitre pr√©c√©dent, vous avez d√©couvert les types de donn√©es. Mais il reste encore tellement de choses √† apprendre ! 
Pour commencer, pourquoi avons-nous donc besoin de types de donn√©es ?

Tout d'abord, la seule fa√ßon de d√©clarer une variable en Java est de sp√©cifier directement son type. Regardons la d√©claration suivante de la variable  count  :

Pour la d√©clarer, il faut commencer par le type, puis le nom, et enfin la valeur. Si vous n'avez pas de valeur √† assigner √† votre variable au moment de la d√©claration,
vous devez quand m√™me utiliser le mot cl√© d√©finissant le type, par exemple  int.

Par exemple, si vous voulez compter des mots dans une phrase, mais que vous ne savez pas encore de quelle phrase il s'agit, indiquez le type et d√©clarez la variable 
pour une utilisation future. Cependant, lorsque vous d√©clarez une variable en sp√©cifiant uniquement son type, celle-ci ne peut pas √™tre utilis√©e tant qu'on ne lui a 
pas attribu√© une valeur. En programmation, il est souvent n√©cessaire de d√©clarer une variable en sachant que vous lui attribuerez une valeur plus tard.

Si je ne peux pas utiliser une variable sans valeur, pourquoi donc j'ai besoin de sp√©cifier le type ? Pourquoi pas uniquement la valeur ? üßê

Pendant l'ex√©cution d'un programme, votre CPU (unit√© centrale de traitement) a besoin de savoir combien d'espace r√©server √† votre variable. Utiliser un type pour 
d√©clarer une variable permet √† votre CPU de lui allouer un espace m√©moire adapt√©.

Le CPU est comme le chef d'orchestre de votre ordinateur, c'est lui qui cadence tous les traitements n√©cessaires au bon fonctionnement de vos programmes.

Parmi les types de donn√©es, il existe les types primitifs. Ce sont des types qui existent par eux-m√™me, comme des atomes

Les types les plus simples servent de base √† toutes les op√©rations informatiques.

Il est possible de les combiner pour construire des types plus complexes, comme nous le verrons dans le chapitre suivant.

Parmi les types primitifs, vous serez souvent amen√© √† utiliser les types num√©riques et les cha√Ænes. Parlons-en un peu !
D√©couvrez les types num√©riques

Les types num√©riques sont :

    les nombres entiers, comme les nombres que vous utilisez pour compter (1, 2, 3) ;

    les nombres d√©cimaux, que vous pouvez utiliser pour stocker les valeurs mon√©taires (2,50 ou 5,99 par exemple).

Les entiers

Commen√ßons par un type que vous connaissez d√©j√† bien : les entiers ! Les entiers sont d√©clar√©s comme n'importe quelle autre variable, avec un type, puis un nom, puis, 
si vous l'avez, une valeur :

int count = 10;

Vous reconnaissez le mot cl√©  int  du dernier chapitre ?

C'est parce que vous d√©clarez des entiers avec le mot cl√© type  int. Votre variable  count  a un type entier. Et sa valeur est de 10, qui est... un nombre entier ! üòâ
Les d√©cimales

Pour les d√©cimales, Java utilise deux types diff√©rents :

    float ;

    double.

Ces deux types ont le m√™me but. La diff√©rence est que  double  est deux fois plus pr√©cis que  float, ce qui signifie qu'il propose plus de d√©cimales d'un nombre 
apr√®s la virgule.

Si vous avez besoin de stocker quelque chose de grand, comme un num√©ro √† 12 chiffres  1876.79797657, vous devrez utiliser  double. En effet,  float  ne pourra stocker 
que la moiti√© de ce chiffre... Le reste serait tronqu√© et perdu √† tout jamais !

Pour une pr√©cision jusqu'√† 2 d√©cimales apr√®s la virgule, vous pouvez utiliser  float.  Au-del√†, ce sera  double.

Ces types sont d√©clar√©s et initialis√©s de la fa√ßon suivante :

float length = 1876.79;

double width = 1876.79797657;

Mais que se passe-t-il si je fournis des valeurs sup√©rieures ?

Par exemple :

double a = 1876.79797657765609870978709780987;

float b = 1876.79797657765609870978709780987;

Eh bien, elles vont perdre toutes les deux un peu de pr√©cision, mais pas au m√™me degr√© :

// a -> 1876.797976

 // b -> 1876.79

Avec des valeurs plus petites, cela ne fait aucune diff√©rence :

float length = 10.0;

double width = 10.0;

Dans l'exemple ci-dessus, les deux variables contiennent de petites valeurs. Sur la deuxi√®me ligne, nous utilisons simplement  double  au lieu de  float. Comme cela 
ne fait aucune diff√©rence fonctionnelle, je vous encourage √† utiliser la plus petite dans cet exemple, puisque l'utilisation d'une plus grande bo√Æte pour stocker les
petites valeurs gaspille de la m√©moire !

La plupart du temps, quand vous d√©veloppez un programme, vous ne contr√¥lez pas forc√©ment la pr√©cision des variables que vous aurez √† traiter. C'est pourquoi, 
en pratique, vous constaterez que la plupart des programmeurs Java utilisent le type  double.
M√©langez des types num√©riques

Dans vos programmes, vous pouvez √™tre amen√© √† faire des op√©rations math√©matiques. Cependant, les variables utilis√©es ne seront pas forc√©ment de m√™me type 
(tant qu'elles restent des valeurs num√©riques). C'est pourquoi  il est important de garder √† l'esprit la fa√ßon dont les types se m√©langent et les cons√©quences 
que cela peut avoir. Par exemple, si vous divisez deux nombres :  5/2, on s'attendrait logiquement √† un r√©sultat de  2,5. Mais pour l'ordinateur, ce n'est pas si 
√©vident que √ßa et vous pourriez obtenir  2  de fa√ßon assez inattendue !

Vous voyez ? Les ordinateurs ne sont pas aussi intelligents que nous !

Passons en revue quelques exemples dans Java :

int a = 10;

int b = 4;

int c = a/b;

Devinez quel sera le r√©sultat de la division ?

Eh bien, c'est  2  ‚Äì pas forc√©ment ce √† quoi on s'attendait, n'est-ce pas ?

Cela est d√ª au fait que les variables  a  et  b  se sont vu assigner des nombres entiers (int). Ainsi, l'op√©ration de division ne peut fournir qu'un nombre entier 
comme r√©ponse.

Une division entre deux entiers s'appelle une division enti√®re. Elle a toujours pour r√©sultat un nombre entier.

Mais que se passera-t-il avec le code ci-dessous ?

int a = 10;

int b = 4;

double c = a/b;

Cette fois,  c  va pouvoir stocker un nombre d√©cimal. Cependant, l'expression  a/b  divise toujours un  int  avec un autre  int. Donc  c  se verra assign√© le 
r√©sultat de la division enti√®re. Ce qui fait, encore une fois, 2.

Zut...Cela ne fonctionne toujours pas. üò´

Pour obtenir un r√©sultat avec des d√©cimaux, il va falloir combiner deux types.

int a = 10;

double b = 4;

int c = a/b;

Vous voyez comment la variable  a  √©t√© d√©clar√©e avec  int  et la variable  b  avec  double ?

Dans cet exemple, le r√©sultat de l'expression  a/b  sera bien un nombre d√©cimal,  2,5.

Cependant,  c  est d√©clar√© comme un  int  et ne peut pas se voir attribuer une valeur d√©cimale. Cette affectation n'est pas possible !

Vous pouvez faire en sorte qu'une variable d'un type agisse comme un autre type. C'est ce qu'on appelle le type casting (ou la conversion d'une valeur dans un autre 
type). Pour r√©soudre le probl√®me que nous avons eu dans le dernier exemple, faites croire √† la variable  b  que c'est un entier en l'assignant √†  c  comme ci-dessous :

int a = 10;

double b = 4;

int c = a/ (int) b; //-> c contient 2, car a /(int) b est une division enti√®re

Vous voyez comment nous avons fait pour que la variable  b  agisse comme un nombre entier ? Vous pouvez aussi faire en sorte qu‚Äôune variable enti√®re  b fasse 
comme si 
sa valeur √©tait  double  :

int a = 10;

int b = 4;

double c = a/(double) b; //-> c contient 2.5, car la valeur de b est transform√©e en double

Convertir une variable en  double  vous permet d'effectuer une division en virgule flottante, m√™me si vous utilisez des variables avec un type entier  int.

D√©couvrez les cha√Ænes de caract√®res (strings)

Passons maintenant √† un type plus complexe, les strings. Les strings (ou cha√Ænes de caract√®res) permettent de stocker du texte, ou en d'autres termes, un ensemble 
de caract√®res. Voici comment d√©clarer une variable string dans Java :

String city = "New York";

String movie = "Best ever";

String pet;

String emptyString = "";

Vous pouvez fusionner une ou plusieurs d'entre elles. Rassemblons quelques  strings  :

String firstFavoriteCity = "New York";

String secondFavoriteCity = "Buenos Aires";

String favorites = firstFavoriteCity + secondFavoriteCity; // -> "New YorkBuenos Aires"

 Mais, il n'y a pas d'espace entre les deux. C'est bizarre, non ?

Rendons ce code plus lisible en concat√©nant, c'est-√†-dire en mettant bout √† bout des cha√Ænes de caract√®res et des variables :

String firstFavoriteCity = "New York"

String secondFavoriteCity = "Buenos Aires"


String favorites = "My favorite cities are " +firstFavoriteCity+ " and "+secondFavoriteCity; // -> "My favorite cities are New York and Buenos Aires"

C'est beaucoup mieux maintenant ! Vous pouvez √©galement concat√©ner d'autres types de donn√©es avec des cha√Ænes de caract√®res, telles que des nombres.

Ah oui ? Mais comment je proc√®de ?

String favoriteCity = "Buenos Aires";

int numberOfTrips = 5;


String story = "I've traveled to " +favoriteCity+ " " +numberOfTrips+ " times!"; // -> "I've traveled to Buenos Aires 5 times!"

Juste avant, nous avons utilis√© l'op√©rateur  +  pour ajouter deux nombres. Ici, avec des cha√Ænes de caract√®res, l'op√©rateur  +  peut √™tre utilis√© pour concat√©ner 
des cha√Ænes et des nombres entiers. La concat√©nation fait r√©f√©rence √† l'assemblage de cha√Ænes de caract√®res ou de nombres, et de cha√Ænes de caract√®res.
En r√©sum√©

Dans ce chapitre, vous avez appris les particularit√©s de quelques types de donn√©es simples :

    nombre entiers (mot-cl√©  int) ;

    nombres d√©cimaux (mots cl√©s  float  et  double) ;

    cha√Ænes de caract√®res (mot cl√©  String).

Vous avez aussi appris √† manipuler ces types :

    vous pouvez effectuer des op√©rations num√©riques sur des nombres du m√™me type ;

    pour utiliser ensemble des nombres de types diff√©rents dans les op√©rations, utilisez cast pour qu'ils se comportent comme le type n√©cessaire ;

    les cha√Ænes peuvent √™tre mises bout √† bout. Cela s'appelle la concat√©nation.

Dans le chapitre suivant, nous aborderons la fonction main ; c'est le point d'entr√©e de votre programme.
